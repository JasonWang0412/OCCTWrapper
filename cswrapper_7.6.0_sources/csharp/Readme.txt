// Created: 2007-06-29
//
// Copyright (c) 2007-2021 OPEN CASCADE SAS
//
// This file is part of commercial software by OPEN CASCADE SAS.
//
// This software is furnished in accordance with the terms and conditions
// of the contract and with the inclusion of this copyright notice.
// This software or any other copy thereof may not be provided or otherwise
// be made available to any third party.
//
// No ownership title to the software is transferred hereby.
//
// OPEN CASCADE SAS makes no representation or warranties with respect to the
// performance of this software, and specifically disclaims any responsibility
// for any damages, special or consequential, connected with its use.

Advanced Sample: Using Open CASCADE Technology from C#
======================================================

The sample demonstrates how Open CASCADE Technology classes can be wrapped to 
C# language and used in the uniform and transparent way from within .NET 
applications.

It includes the tools and describes the methodology of wrapping, so that it 
is easy to everybody to wrap the new classes if needed.

The sample consists of the following projects:

- OCCwrapCSharp: core library containing wrapping interface files and C++ part 
  of wrapper code (native). See description in the file OCC2CSharp.txt for 
  more details.

- OCCCSharp: .NET assembly containing C# wrapper shadow classes (managed code) 
  for OCCT classes. The shadow classes and project file are generated by SWIG 
  during building OCCwrapCSharp library.

- OCCWinForms: .NET assembly containing classes allowing to embed OCCT viewer 
  as a custom control into WinForms applications.

- OCCWpf: .NET assembly containing WPF classes allowing to embed OCCT viewer 
  as a custom presentation into WPF applications.

- ImportExport: standard OCCT sample rewritten in C#. 

- ImportExportWPF: single document WPF sample showing integration of OCCT 3D 
  viewer into WPF application.

- CSharpTest: .NET console application implementing a few test cases for
  important aspects of wrapping.

1. Installation and configuration
   ------------------------------

  a) Make sure you are running Windows 2000, Windows XP, Windows Vista or 7
     and have Visual Studio 2010 or later with C++ and C# properly installed. 
     Note that projects provided with the sample are in Visual Studio 2010 
     format; if higher version of Visual is used they will be converted 
     automatically by Visual Studio upon opening.

     ImportExportWPF sample requires Windows Vista or later and up-to-date
     OpenGL graphic drivers implementing WGL_NV_DX_interop extension
     (supported by NVIDIA, AMD and Intel).

  b) Install and build Open CASCADE Technology libraries (OCCT) and Products
     (optionally) on your workstation.

     The directory containing OCCT configuration scripts, and *inc* and *src* 
     folder (e.g. "opencascade-6.7.0" in OCCT 6.7.0) is referenced below as 
     %CASROOT%.

  c) Unpack C# wrapper sample to some directory 
     (e.g., %CASROOT%/samples_advanced/csharp). 

     The directory where sample is installed is referenced further as 
     %SAMPLE_DIR%.

  d) Install SWIG (version 3.0.6 or later) on your workstation.
     Pre-compiled package for Windows can be downloaded from SourceForge:
     http://sourceforge.net/projects/swig/files/swigwin/

  e) Install Tcl/Tk (version 8.5 or 8.6) on your workstation.
     Pre-compiled package for Windows can be downloaded from ActiveState:
     http://www.activestate.com/Products/activetcl/download.mhtml
     
  f) Install CMake (version 3.12 or later) on your workstation.
     Pre-compiled package for Windows can be downloaded from CMake:
     https://cmake.org/download/
     
  g) Run CMake-GUI tool, specify %SAMPLE_DIR% as source directory, 
     choose convenient location as build directory, click 'Configure'
     and select target generator, e.g. "Visual Studio 14 2015 Win64".
     
  h) In case if you need to wrap OCCT Products, set WRAP_PRODUCTS variable;
  
     Specify path to swig.exe via SWIG_EXECUTABLE variable;
  
     Specify path to Tcl/Tk include directory using TCL_INCLUDE_PATH variable;
     
     Specify installation directory using CMAKE_INSTALL_PREFIX;
     
     Specify .Net Framework version using BUILD_dotNetFrameworkVersion (by default uses v4.0);
     
     Specify OpenCASCADE_DIR pointing to %CASROOT%;
  
     If WRAP_PRODUCTS is set, select target products to be wrapped, specify PRODUCTS_DIR 
     pointing to OCCT Products installation directory and, if necessary, path to license
     file using OCCLICENSE_FILE. In addition, USE_OCC_LICENSE can be set for building wrapper 
     protected by OCCT license;
     
     Click 'Configure' to start process of wrappers generation and wait till 
     it completes (it may take several minutes);
     
     Click 'Generate' to generate MS Visual Studio project files;
     
     Open and build solution using MS Visual Studio IDE;
     
     To install package build 'INSTALL' project explicitly.

2. Re-generation of wrappers
   -------------------------

  These actions should be performed after any modification of the wrapper 
  interface files (e.g. addition of new classes)

  a) If any of C# sample projects is opened in MS Visual Studio, close it

  b) Go to build directory and remove Wrappers directory containing outdated results

  c) Run CMake-GUI tool, specify existing build directory, and regenerate wrappers by
     clicking 'Configure', 'Generate' buttons.

  d) Check output of the previous command for possible errors.
     In case of SWIG errors refer to SWIG documentation.
     
  e) Run script listbad.bat; it will list C++ types which are not wrapped
     to C# (you may need to install 'sed' on your workstaion).
     Its output looks as follows:

   | Not wrapped type: Standard_IStream
   | Not wrapped type: Standard_OStream
   | Not wrapped type: Standard_UUID
   | Used in:
   | Standard_GUID.cs
   | 
   | Not wrapped type: unsigned_char
   | Used in:
   | Image_PixMap.cs
   | TColStd_Array1OfByte.cs
   | TColStd_HArray1OfByte.cs

  f) Check output of listbad.bat for possible appearance of types which 
     are expected to be wrapped. If these are present, check SWIG interface
     files for presence of corresponding WRAP... instruction; also check that 
     each class is wrapped before all classes that use it.
     In case of cyclic dependence between classes, split the wrapping 
     instructions by using low-level wrapping macros (see how class V3d_View 
     is wrapped for example).

  g) Open, build and install solution using MS Visual Studio IDE.
  
  h) Check for possible compilation errors. In case of errors or warnings 
     check wrapping instructions for involved types.

  i) Wrapper assembly is now ready for use; it can be found in installation directory
     depending on configuration (e.g. *%CMAKE_INSTALL_PREFIX%/win64/vc10/bind* for 
     Visual Studio 2010, 64bit, Debug).

     The wrapper assembly is contained in OCCCSharp.dll; file OCCCSharp.xml 
     contains associated documentation, and OCCwrapCSharp.dll contains C
     wrapper functions.

  j) If you use the wrapper in a project, OCCwrapCSharp.dll and OCCCSharp.dll
     (as well as OCCWinForms.dll and / or OCCWpf.dll, if used) need to be 
     located in the same directory as the executable. So, after regeneration 
     of the wrapper, copy the DLLs there.

  k) For running test or sample application, launch CSharpTest.bat,
     ImportExport.bat or ImportExportWPF.bat.

     Note that *.bat scripts can be run with additional arguments specifying 
     version of Visual Studio, bitness, and configuration, 
     e.g.:

         > ImportExport.bat vc10 win32 Debug

     In addition to standard configurations *Debug* and *Release*, specific 
     configuration *Protected* is available. In this configuration, wrapper is
     protected by OCC license protection tool.

3. Adding new classes to wrapper
   -----------------------------

  See file HowToWrap.txt (located in sub-folder OCCWrapCSharp or ../swig) for 
  general instructions on wrapping, and file OCCwrapCSharp/OCC2CSharp.txt for
  details specific for C# language.
